---
title: "Examples of using tryCatch"
author: "Tiago A. Marques"
format: html
editor: visual
---

# Introduction

When running R code one might often face scenarios when code throws an error, stopping the excution of code one would like not to break.

Under such situations one could use R's bespoke mechanisms to make sure the code continues.

here I illustrate how one can use `tryCatch` to do so.

Imagine you have a given funtion you want to run, returning its result if the code runs, but returning the error it generates if such an error happens to occur.

# To catch an error in a function

First, we create a function that can catch other functions errors calling it `run_and_record_error`

```{r}
run_and_record_error <- function(func, ...) { 
  # this function runs some function, it's first argument func, 
  # and if that function throws an error it records this was
  # the case as well as the error message
  result <- NULL
  error_message <- NULL
  success <- TRUE
  
  tryCatch({
    result <- func(...)
  }, error = function(e) {
    error_message <<- e$message
    success <<- FALSE
  })
  
  list(
    success = success,
    result = result,
    error = error_message
  )
}
```

then, we create an function we can easily induce to break, calling it `might_fail`

```{r}
# Example usage:
might_fail <- function(x) {
  10 / x
}
```

And now we run `might_fail`, first not breaking the code inside it

```{r}
output <- run_and_record_error(might_fail, 0)
print(output)
```

And now breaking the code inside it

```{r}
output <- run_and_record_error(might_fail, "dah")
print(output)
```

Here's a slightly more elaborate example, with a new function `myownfunc`

```{r}
myownfunc <- function(mydata){
  xxx<-lm(y~x,data=mydata)
  return(xxx)
}
```

Create some data

```{r}
n<-100
x=runif(n,10,20)
y=2+3*x+rnorm(n,sd=0.25)
exampledata <- data.frame(x=rnorm(100),y=2+3*x)
```

run the code, not breaking it

```{r}
output <- run_and_record_error(myownfunc, mydata=exampledata)
print(output)
```

break the code, catching the error

```{r}
output <- run_and_record_error(myownfunc, mydata="dah")
print(output)
```

# To catch an error in a for loop

Here we use the function within a `for` loop, such that one does not break completely the loop in case an error is thrown at a given iteration

```{r}
errors <- list()

n<-10
results<- rep(NA,n)

for (i in 1:10) {
  result <- tryCatch({
    # Example risky code (replace with your own)
    value <- 10 / i
    if(value==5){
      glm(a~b)} else {
      results[i] <- i+22.5  
      print(i)}
    NULL  # No error occurred
  }, error = function(e) {
    e$message  # Capture error message
  })
  
  if (!is.null(result)) {
    # If result is not NULL, an error occurred
    errors[[length(errors) + 1]] <- list(iteration = i, error = result)
    next  # Skip to the next iteration
  }
  
  # Normal processing if no error
  cat("Iteration", i, "succeeded\n")
}

print(errors)
print(results)
```

# Fast reproduction of results inducing errors

Imagine a scenario where you have a for loop that might return errors in some iterations, and that you would like to be able to quickly look at those iterations, e.g. to understand why some errors arise in order to solve them.

We can do this by storing the random seed at each iteration, and then running the code from there. This is illustrated below, with a function that generates a uniform random number in the interval (10,20) and throws an error if said number is lower than 12.5

```{r}
# actually setting a seed here so this does not change
# each time code is run!
set.seed(181)
n<-10
errors <- vector("list", n)
results<- rep(NA,n)
seeds<- vector("list", n)
for (i in 1:10) {
  result <- tryCatch({
    runif(1)
    seeds[[i]] <- .Random.seed
    # Example risky code (replace with your own)
    value <- runif(1,10,20)
    if(value<12.5){
      glm(a~b)} else {
      results[i] <- value
      print(i)}
    NULL  # No error occurred
  }, error = function(e) {
    e$message  # Capture error message
  })
  
  if (!is.null(result)) {
    # If result is not NULL, an error occurred
    errors[[i]] <- list(iteration = i, error = result)
    next  # Skip to the next iteration
  }
  
  # Normal processing if no error
  cat("Iteration", i, "succeeded\n")
}

print(errors)
print(results)
```

Several of the iterations threw up an error. Imagine this code was not run in milliseconds, but instead it took a long time to get to say iteration 8 (one of those that returned an error), and you wanted to see what caused the error. Since we stored the random seed, this is now straightforward, as illustrated below

```{r}
.Random.seed <- seeds[[8]]
runif(1,10,20)
```

We could naturally obtain the data from each of those iterations that threw errors

```{r}
.Random.seed <- seeds[[2]]
runif(1,10,20)
.Random.seed <- seeds[[10]]
runif(1,10,20)
```

and those that did not, e.g. iteration 2

```{r}
.Random.seed <- seeds[[6]]
runif(1,10,20)
```

If you use this or have any suggestions to make the material more useful ping me at tiago.marques at st-andrews.ac.uk
